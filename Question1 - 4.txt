# Assignment 5

Information mentioned here is also included in README.md file

Point 1 -

Topic area

1) Identify restaurants around NJ Transit Train Station
2) Maintain personal list of Favorite restaurants
3) Let a friend know about a Restaurant


Functional Scope 

1) Show searchable option for user to pick any train station, and browse through nearby restaurants.
2) Upon selection of any restaurant, show a map that has the selected restaurant in the view
3) Have option to select one ore more restaurant and notify people

What makes it useful

1) Targets NJTransit Train commuters that are looking to stop by at some take away place on the way to home. 
2) Allows user to save restaurants that they have visited before, or mail / msg the current restaurant location to a friend so that the user gets picked up.
3) Features in-built mail / messaging capability. For instance, one can select a restaurant and mail location coordinates to the spouse. This can be an information for a pick up or to join for the dinner.

What features must exist for the App to make any sense?

1) App requires NJ Transit train station data that has location information.
2) App will use Yelp API to find restaurants from a given train station.
3) App will need mail / msg capability 
4) App will save NJ Transit data if it's the first time user, and also allow saving restaurants.

What additional features are you thinking about and how realistic are they?

1) I'm thinking to plug-in Uber API, so that user could use a cab to get to the restaurant.
2) When the user navigates from Train Station -> Restaurant Screen -> Map View, I would like to show 2 sets of data. The first annotation on map will be Red in color that shows the train station. The second annotation will Restaurant(s) that corresponds to the train station.


Point 2 -

Additional iOS functionalities -

1) MapKit to display Train Station and Restaurant
2) CoreData to save Restaurant details

Point 3 -

Screen Controllers & Flow -
App will feature a TabBar Controller. Tab bar Controller will have 3 tabs. 

Tab 1 -

- User will search for location / zip code to see list of Train Stations around.
- Search will produce Array of TrainStation which will be displayed in the TrainStationVC.
- On click of Train Station row item, the app will call Yelp API. The input to the call will be zip code / town name of the 
  Train Stop station. The API call will be asynchronous. 
- The result of the API call will be populated into Array of Restaurant and displayed in RestaurantVC.
- App also persists a Favorite list of Restaurants. This comes from Array of Favorite Restaurants
- App will check if any of the populated Restaurant from Yelp is already in the Favorite list. If it is, then the app will display  a 'fully painted Heart Image'.  This is done by checking if the restaurantId that comes from the Restaurant Array is available in Favorite Restaurant Array.
- If the row display 'empty heart' image, then the corresponding Restaurant is not in the Favorite list.
- On Click of 'empty Heart' image, the screen will segue to DetailRestaurantVC  to Add the Restaurant to the Favorite list.
- On Click of 'fully painted Heart Image', App will show option to delete the Restaurant from the Favorite list.
- Favorite restaurants are then persisted using NSCoder or CoreData.
- RestaurantVC will have a button to navigate to Map View. On click of this button, Dictionary object [Stop :[Restaurant]] will be passed to the View Controller as datasource. From the below mentioned datamodel, Stop will correspond to the TrainStop that was selected from TrainStationVC, and value of the dictionary will be collection of Restaurants. Map will highlight Stop in Red color, and corresponding Restaurants in blue color.
- Every Restaurant row item can also be navigated to Map View. In this case, only 1 Restaurant item will be passed to Map View Controller. 
- Every Restaurant row item in Restaurant can be ticked or 'Checkmarked'. The CheckMark symbol will be generated using TableViewCell's accessory type in the cellForRowAt function. 
- Restaurants that are CheckMarked will have boolean flag isSelected = true in the RestaurantArray.
- All isSelected Restaurants can be emailed / messaged using the 3'rd tab 'Notify' in the Tab Bar Controller


Tab 2 -

- Array of Favorite Restaurant is fetched on the App launch from NSCoder or CoreData. 
- User can see the Favorite list of Restaurants in SavedRestaurantVC. 
- On click of Favorite row item in SavedRestaurantVC, the app will segue to DetailRestaurantVC.
- There will be an 'Add' option on top of SavedRestaurantVC, app will navigate to DetailRestaurantVC. User can add new Restaurant details 
- User can delete Favorite Restaurant from the list 
- Added / Edited / Deleted Restaurants will get saved.


- Tab 3 

    - Selected Restaurants from Tab1, will be filtered and user can mail / msg about these Restaurants to someone.
    - App will use PopUpDialog, which is a third party plugin. This will be included into the project using Cocapods.
    - PopUpDialog will show option to Text / Mail
    - PopUpDialog will implement MFMailComposeViewControllerDelegate, MFMessageComposeViewControllerDelegate to mail / msg.
    

Persistence -

1) App will use NJTransitData.csv file included in the project directory. 
2) App will have features to save Favorite list of Restaurants, leave quick notes about it, and also gvie personal rating for it.  CoreData / NSCoder may be used to store these information.

Background Task -
1) App will use Alamofire to request Restaurant information using yelp API
2) App will use background thread to load NJTransit Train data & Restaurant data

Images -
1) Star image - Rating purposes - Downloaded from Google Image - Source mentioned - Getdrawings.com
2) Rail image - Train station purpose - Downloaded from Google Image - Source mentioned - Iconfinder.com - Rail
3) Empty Star - Ratings that are not given  - Downloaded from Google Image - Source mentioned - Wikimedia commons
4) Pizza image  - Downloaded from Google Image - Source mentioned - pixels
5) Dosa image  - Downloaded from Google Image - Source mentioned - JustDial
6) Chipotle  - Downloaded from Google Image - Source mentioned -  Chipotle


Point 4 -

Data Model
Class - Stop  for TrainStops
Class - Restaurant for Restaurants

class Stop {
var trainstopName : String
var latitude : Double
var longitide : Double
}

class Restaurant{
var trainStopName
var restaurantName : String
var restaurantId : String
var latitude : Double
var longitide : Double
var distanceFromTrainStop
var givenRating : Int // Comes from Yelp
var myRating : Int
var isSelected : Bool
}

class Favorite{
var trainStopName
var restaurantName : String
var restaurantId : String
var distanceFromTrainStop
var givenRating : Int // Comes from Yelp
var myRating : Int
var dateLastchanged : Date
}



